; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

include listing.inc

INCLUDELIB OLDNAMES

EXTRN	__security_check_cookie:PROC
EXTRN	exit:PROC
EXTRN	free:PROC
EXTRN	malloc:PROC
EXTRN	fclose:PROC
EXTRN	fopen_s:PROC
EXTRN	fread_s:PROC
EXTRN	fseek:PROC
EXTRN	ftell:PROC
EXTRN	fwrite:PROC
EXTRN	printf:PROC
$SG-7	DB	'UEFI option ROM extractor and decompressor V1.0', 0aH, 00H
	ORG $+15
$SG-8	DB	'This program extracts and decompresses UEFI .rom files i'
	DB	'n their .efi files', 0aH, 00H
$SG-11	DB	'rb', 00H
	ORG $+1
$SG-9	DB	'Usage: %s <In_File> <Out_File>', 0aH, 0aH, 00H
	ORG $+3
$SG-24	DB	'rb', 00H
	ORG $+1
$SG-10	DB	'Copyright (C) 2014 - AnV Software, all rights reserved', 0aH
	DB	00H
$SG-12	DB	'Error opening file %s!', 0aH, 00H
$SG-13	DB	'Failed to read PCI ROM header from file!', 0aH, 00H
	ORG $+2
$SG-35	DB	'wb', 00H
	ORG $+1
$SG-14	DB	'Failed to seek to PCI data structure!', 0aH, 00H
	ORG $+1
$SG-15	DB	'Failed to read PCI data structure from file %s!', 0aH, 00H
	ORG $+7
$SG-16	DB	'Failed to read PCI data structure from file %s!', 0aH, 00H
	ORG $+7
$SG-17	DB	'Failed to re-seek to ROM header structure!', 0aH, 00H
	ORG $+4
$SG-18	DB	'Failed to read EFI PCI ROM header from file!', 0aH, 00H
	ORG $+2
$SG-19	DB	'Found compressed EFI ROM start at 0x%x', 0aH, 00H
$SG-20	DB	'Found non-compressed EFI ROM start at 0x%x, exiting...', 0aH
	DB	00H
$SG-21	DB	'Failed to seek to next image!', 0aH, 00H
	ORG $+1
$SG-22	DB	'Failed to seek to next image!', 0aH, 00H
	ORG $+1
$SG-23	DB	'No compressed EFI ROM found!', 0aH, 00H
	ORG $+2
$SG-25	DB	'Input buffer allocation failed!', 0aH, 00H
	ORG $+15
$SG-26	DB	'Not an EFI ROM file, attempting decompression of data di'
	DB	'rectly...', 0aH, 00H
	ORG $+5
$SG-27	DB	'Could not allocation new ROM buffer!', 0aH, 00H
	ORG $+2
$SG-28	DB	'get UEFI decompression info failed!', 0aH, 00H
	ORG $+3
$SG-29	DB	'Input size: %lu, Output size: %lu, Scratch size: %lu', 0aH
	DB	00H
	ORG $+2
$SG-30	DB	'Incorrect output size!', 0aH, 00H
$SG-31	DB	'Incorrect scratch buffer size!', 0aH, 00H
$SG-32	DB	'Scratch buffer allocation failed!', 0aH, 00H
	ORG $+5
$SG-33	DB	'Output buffer buffer allocation failed!', 0aH, 00H
	ORG $+7
$SG-34	DB	'UEFI decompression failed!', 0aH, 00H
PUBLIC	__$ArrayPad$
PUBLIC	GetEfiCompressedROM
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
; File c:\users\andy vandijck\downloads\uefiromextract\uefiromextract\uefiromextract\uefiromextract\main.c
pdata	SEGMENT
$pdata$GetEfiCompressedROM DD imagerel $LN37
	DD	imagerel $LN37+93
	DD	imagerel $unwind$GetEfiCompressedROM
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$GetEfiCompressedROM DD imagerel $LN37+93
	DD	imagerel $LN37+505
	DD	imagerel $chain$0$GetEfiCompressedROM
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$GetEfiCompressedROM DD imagerel $LN37+505
	DD	imagerel $LN37+537
	DD	imagerel $chain$1$GetEfiCompressedROM
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$GetEfiCompressedROM DD imagerel $LN37+537
	DD	imagerel $LN37+736
	DD	imagerel $chain$2$GetEfiCompressedROM
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$GetEfiCompressedROM DD 020021H
	DD	01d3400H
	DD	imagerel $LN37
	DD	imagerel $LN37+93
	DD	imagerel $unwind$GetEfiCompressedROM
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$GetEfiCompressedROM DD 021H
	DD	imagerel $LN37
	DD	imagerel $LN37+93
	DD	imagerel $unwind$GetEfiCompressedROM
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$GetEfiCompressedROM DD 020821H
	DD	01d3408H
	DD	imagerel $LN37
	DD	imagerel $LN37+93
	DD	imagerel $unwind$GetEfiCompressedROM
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetEfiCompressedROM DD 072319H
	DD	01f6415H
	DD	0180115H
	DD	07007c009H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT GetEfiCompressedROM
_TEXT	SEGMENT
InFptr$ = 48
PciDs23$ = 56
PciDs30$ = 80
EfiRomHdr$ = 112
PciRomHdr$ = 144
__$ArrayPad$ = 176
InFile$ = 224
Pci23$ = 232
EFIIMGStart$ = 240
GetEfiCompressedROM PROC				; COMDAT
; Line 672
$LN37:
	mov	QWORD PTR [rsp+32], rsi
	push	rbp
	push	rdi
	push	r12
	lea	rbp, QWORD PTR [rsp-71]
	sub	rsp, 192				; 000000c0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-121], rax
	movzx	edi, dl
	mov	r12, r8
	mov	rsi, rcx
; Line 685
	mov	rdx, rcx
	lea	r8, OFFSET FLAT:$SG-11
	lea	rcx, QWORD PTR InFptr$[rbp-121]
	call	fopen_s
	test	eax, eax
	je	SHORT $LN21@GetEfiComp
; Line 689
	lea	rcx, OFFSET FLAT:$SG-12
	mov	rdx, rsi
	call	printf
; Line 691
	xor	al, al
	jmp	$LN22@GetEfiComp
$LN21@GetEfiComp:
; Line 702
	mov	rcx, QWORD PTR InFptr$[rbp-121]
	mov	QWORD PTR [rsp+232], rbx
	call	ftell
; Line 709
	mov	rcx, QWORD PTR InFptr$[rbp-121]
	mov	edx, 26
	mov	QWORD PTR [rsp+32], rcx
	lea	r9d, QWORD PTR [rdx-25]
	lea	rcx, QWORD PTR PciRomHdr$[rbp-121]
	mov	r8d, edx
	mov	ebx, eax
	call	fread_s
	cmp	rax, 1
	jne	$LN25@GetEfiComp
	npad	12
$LL20@GetEfiComp:
; Line 720
	movzx	edx, WORD PTR PciRomHdr$[rbp-97]
	mov	rcx, QWORD PTR InFptr$[rbp-121]
	xor	r8d, r8d
	add	edx, ebx
	call	fseek
	test	eax, eax
	jne	$LN26@GetEfiComp
; Line 727
	xor	eax, eax
; Line 731
	mov	r9d, 1
	mov	QWORD PTR PciDs23$[rbp-121], rax
	mov	QWORD PTR PciDs23$[rbp-113], rax
	mov	QWORD PTR PciDs23$[rbp-105], rax
	mov	QWORD PTR PciDs30$[rbp-121], rax
	mov	QWORD PTR PciDs30$[rbp-113], rax
	mov	QWORD PTR PciDs30$[rbp-105], rax
	mov	DWORD PTR PciDs30$[rbp-97], eax
	mov	rax, QWORD PTR InFptr$[rbp-121]
	mov	QWORD PTR [rsp+32], rax
	cmp	dil, r9b
	jne	SHORT $LN16@GetEfiComp
	mov	edx, 24
	lea	rcx, QWORD PTR PciDs23$[rbp-121]
	mov	r8d, edx
	call	fread_s
	cmp	rax, 1
	je	SHORT $LN13@GetEfiComp
; Line 735
	lea	rcx, OFFSET FLAT:$SG-15
	mov	rdx, rsi
	call	printf
; Line 736
	jmp	$BailOut$4974
$LN16@GetEfiComp:
; Line 740
	mov	edx, 28
	lea	rcx, QWORD PTR PciDs30$[rbp-121]
	mov	r8d, edx
	call	fread_s
	cmp	rax, 1
	jne	$LN28@GetEfiComp
$LN13@GetEfiComp:
; Line 748
	cmp	BYTE PTR PciDs23$[rbp-101], 3
	je	$LN11@GetEfiComp
	cmp	BYTE PTR PciDs30$[rbp-101], 3
	je	$LN11@GetEfiComp
; Line 792
	cmp	BYTE PTR PciDs23$[rbp-100], 128		; 00000080H
	je	$BailOut$4974
	cmp	BYTE PTR PciDs30$[rbp-100], 128		; 00000080H
	je	SHORT $BailOut$4974
; Line 799
	mov	rcx, QWORD PTR InFptr$[rbp-121]
	xor	r8d, r8d
	cmp	dil, 1
	jne	SHORT $LN4@GetEfiComp
	movzx	edx, WORD PTR PciDs23$[rbp-105]
	shl	edx, 9
	add	edx, ebx
	call	fseek
	test	eax, eax
	je	SHORT $LN1@GetEfiComp
; Line 800
	lea	rcx, OFFSET FLAT:$SG-21
; Line 801
	jmp	SHORT $LN36@GetEfiComp
$LN4@GetEfiComp:
; Line 804
	movzx	edx, WORD PTR PciDs30$[rbp-105]
	shl	edx, 9
	add	edx, ebx
	call	fseek
	test	eax, eax
	jne	$LN32@GetEfiComp
$LN1@GetEfiComp:
; Line 702
	mov	rcx, QWORD PTR InFptr$[rbp-121]
	call	ftell
; Line 709
	mov	edx, 26
	lea	rcx, QWORD PTR PciRomHdr$[rbp-121]
	mov	ebx, eax
	mov	rax, QWORD PTR InFptr$[rbp-121]
	lea	r9d, QWORD PTR [rdx-25]
	mov	r8d, edx
	mov	QWORD PTR [rsp+32], rax
	call	fread_s
	cmp	rax, 1
	je	$LL20@GetEfiComp
$LN25@GetEfiComp:
; Line 713
	lea	rcx, OFFSET FLAT:$SG-13
$LN36@GetEfiComp:
	call	printf
$BailOut$4974:
; Line 812
	lea	rcx, OFFSET FLAT:$SG-23
	call	printf
; Line 814
	mov	rcx, QWORD PTR InFptr$[rbp-121]
	call	fclose
; Line 816
	mov	DWORD PTR [r12], 0
; Line 818
	xor	al, al
$LN34@GetEfiComp:
	mov	rbx, QWORD PTR [rsp+232]
$LN22@GetEfiComp:
; Line 819
	mov	rcx, QWORD PTR __$ArrayPad$[rbp-121]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rsi, QWORD PTR [rsp+248]
	add	rsp, 192				; 000000c0H
	pop	r12
	pop	rdi
	pop	rbp
	ret	0
$LN32@GetEfiComp:
; Line 805
	lea	rcx, OFFSET FLAT:$SG-22
; Line 806
	jmp	SHORT $LN36@GetEfiComp
$LN11@GetEfiComp:
; Line 753
	mov	rcx, QWORD PTR InFptr$[rbp-121]
	xor	r8d, r8d
	mov	edx, ebx
	call	fseek
	test	eax, eax
	je	SHORT $LN10@GetEfiComp
; Line 754
	lea	rcx, OFFSET FLAT:$SG-17
; Line 755
	jmp	SHORT $LN36@GetEfiComp
$LN10@GetEfiComp:
; Line 759
	mov	rax, QWORD PTR InFptr$[rbp-121]
	mov	edx, 26
	lea	rcx, QWORD PTR EfiRomHdr$[rbp-121]
	lea	r9d, QWORD PTR [rdx-25]
	lea	r8d, QWORD PTR [rdx-2]
	mov	QWORD PTR [rsp+32], rax
	call	fread_s
	cmp	rax, 1
	je	SHORT $LN9@GetEfiComp
; Line 763
	lea	rcx, OFFSET FLAT:$SG-18
	jmp	$LN36@GetEfiComp
$LN9@GetEfiComp:
; Line 768
	cmp	WORD PTR EfiRomHdr$[rbp-109], 1
	jne	SHORT $LN8@GetEfiComp
; Line 769
	movzx	eax, WORD PTR EfiRomHdr$[rbp-99]
; Line 771
	lea	rcx, OFFSET FLAT:$SG-19
	lea	edx, DWORD PTR [rax+rbx]
	mov	DWORD PTR [r12], edx
	call	printf
; Line 773
	mov	rcx, QWORD PTR InFptr$[rbp-121]
	call	fclose
; Line 775
	mov	al, 1
	jmp	$LN34@GetEfiComp
$LN8@GetEfiComp:
; Line 777
	mov	rcx, QWORD PTR InFptr$[rbp-121]
	call	fclose
; Line 779
	movzx	edx, WORD PTR EfiRomHdr$[rbp-99]
	lea	rcx, OFFSET FLAT:$SG-20
	add	edx, ebx
	call	printf
; Line 781
	or	ecx, -1
	call	exit
	int	3
$LN28@GetEfiComp:
; Line 744
	lea	rcx, OFFSET FLAT:$SG-16
	mov	rdx, rsi
	call	printf
; Line 745
	jmp	$BailOut$4974
$LN26@GetEfiComp:
; Line 721
	lea	rcx, OFFSET FLAT:$SG-14
; Line 722
	jmp	$LN36@GetEfiComp
$LN35@GetEfiComp:
GetEfiCompressedROM ENDP
_TEXT	ENDS
PUBLIC	Usage
;	COMDAT pdata
pdata	SEGMENT
$pdata$Usage DD	imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$Usage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Usage DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Usage
_TEXT	SEGMENT
appname$ = 48
Usage	PROC						; COMDAT
; Line 664
$LN3:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 665
	lea	rcx, OFFSET FLAT:$SG-7
	call	printf
; Line 666
	lea	rcx, OFFSET FLAT:$SG-8
	call	printf
; Line 667
	lea	rcx, OFFSET FLAT:$SG-9
	mov	rdx, rbx
	call	printf
; Line 668
	lea	rcx, OFFSET FLAT:$SG-10
; Line 669
	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	printf
Usage	ENDP
_TEXT	ENDS
PUBLIC	FillBuf
;	COMDAT pdata
pdata	SEGMENT
$pdata$FillBuf DD imagerel $LN9
	DD	imagerel $LN9+36
	DD	imagerel $unwind$FillBuf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$FillBuf DD imagerel $LN9+36
	DD	imagerel $LN9+145
	DD	imagerel $chain$1$FillBuf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$FillBuf DD imagerel $LN9+145
	DD	imagerel $LN9+170
	DD	imagerel $chain$2$FillBuf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$FillBuf DD 021H
	DD	imagerel $LN9
	DD	imagerel $LN9+36
	DD	imagerel $unwind$FillBuf
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$FillBuf DD 040921H
	DD	07409H
	DD	023405H
	DD	imagerel $LN9
	DD	imagerel $LN9+36
	DD	imagerel $unwind$FillBuf
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$FillBuf DD 010401H
	DD	0204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT FillBuf
_TEXT	SEGMENT
Sd$ = 16
NumOfBits$ = 24
FillBuf	PROC						; COMDAT
; Line 45
$LN9:
	sub	rsp, 8
	mov	r8, rcx
; Line 49
	movzx	ecx, dl
	shl	DWORD PTR [r8+26], cl
; Line 54
	movzx	eax, WORD PTR [r8+24]
	mov	r10d, DWORD PTR [r8+26]
	cmp	dx, ax
	jbe	SHORT $LN3@FillBuf
	mov	r9d, DWORD PTR [r8+30]
	mov	r11d, DWORD PTR [r8+36]
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp], rdi
	mov	ebx, 8
	xor	edi, edi
	npad	12
$LL4@FillBuf:
; Line 56
	sub	dx, ax
	movzx	ecx, dl
	shl	r9d, cl
	or	r10d, r9d
	mov	DWORD PTR [r8+26], r10d
; Line 58
	test	r11d, r11d
	je	SHORT $LN2@FillBuf
; Line 63
	mov	ecx, DWORD PTR [r8+20]
	mov	rax, QWORD PTR [r8]
	dec	r11d
	mov	DWORD PTR [r8+36], r11d
	movzx	r9d, BYTE PTR [rcx+rax]
	lea	eax, DWORD PTR [rcx+1]
	mov	DWORD PTR [r8+30], r9d
	mov	DWORD PTR [r8+20], eax
; Line 66
	jmp	SHORT $LN8@FillBuf
$LN2@FillBuf:
; Line 70
	mov	r9d, edi
	mov	DWORD PTR [r8+30], edi
$LN8@FillBuf:
; Line 71
	mov	WORD PTR [r8+24], bx
	mov	eax, ebx
	cmp	dx, bx
	ja	SHORT $LL4@FillBuf
	mov	rdi, QWORD PTR [rsp]
	mov	rbx, QWORD PTR [rsp+16]
$LN3@FillBuf:
; Line 79
	sub	WORD PTR [r8+24], dx
; Line 84
	mov	eax, DWORD PTR [r8+30]
	movzx	ecx, WORD PTR [r8+24]
	shr	eax, cl
	or	DWORD PTR [r8+26], eax
; Line 85
	add	rsp, 8
	ret	0
FillBuf	ENDP
_TEXT	ENDS
PUBLIC	ReadUnaligned16
; Function compile flags: /Ogtpy
;	COMDAT ReadUnaligned16
_TEXT	SEGMENT
Buffer$ = 8
ReadUnaligned16 PROC					; COMDAT
; Line 15
	movzx	eax, BYTE PTR [rcx+1]
	movzx	ecx, BYTE PTR [rcx]
	shl	eax, 8
	or	eax, ecx
; Line 16
	ret	0
ReadUnaligned16 ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetBits DD imagerel GetBits
	DD	imagerel GetBits+41
	DD	imagerel $unwind$GetBits
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetBits DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT GetBits
_TEXT	SEGMENT
Sd$ = 48
NumOfBits$ = 56
GetBits	PROC						; COMDAT
; Line 105
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	r8, rcx
; Line 111
	movzx	eax, dx
	mov	ecx, 32					; 00000020H
	mov	ebx, DWORD PTR [r8+26]
	sub	ecx, eax
	shr	ebx, cl
; Line 116
	mov	rcx, r8
	call	FillBuf
; Line 118
	mov	eax, ebx
; Line 119
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
GetBits	ENDP
_TEXT	ENDS
PUBLIC	ReadUnaligned32
;	COMDAT pdata
pdata	SEGMENT
$pdata$ReadUnaligned32 DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$ReadUnaligned32
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ReadUnaligned32 DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ReadUnaligned32
_TEXT	SEGMENT
Buffer$ = 48
ReadUnaligned32 PROC					; COMDAT
; Line 19
$LN3:
	sub	rsp, 40					; 00000028H
	mov	rdx, rcx
; Line 26
	add	rcx, 2
	call	ReadUnaligned16
	mov	rcx, rdx
	movzx	r8d, ax
; Line 28
	shl	r8d, 16
	call	ReadUnaligned16
	movzx	eax, ax
	or	eax, r8d
; Line 29
	add	rsp, 40					; 00000028H
	ret	0
ReadUnaligned32 ENDP
_TEXT	ENDS
PUBLIC	UefiDecompressGetInfo
;	COMDAT pdata
pdata	SEGMENT
$pdata$UefiDecompressGetInfo DD imagerel $LN6
	DD	imagerel $LN6+70
	DD	imagerel $unwind$UefiDecompressGetInfo
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$UefiDecompressGetInfo DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT UefiDecompressGetInfo
_TEXT	SEGMENT
Source$ = 48
SourceSize$ = 56
DestinationSize$ = 64
ScratchSize$ = 72
UefiDecompressGetInfo PROC				; COMDAT
; Line 544
$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	r11d, edx
	mov	r10, rcx
; Line 551
	cmp	edx, 8
	jae	SHORT $LN2@UefiDecomp
$LN5@UefiDecomp:
; Line 552
	mov	eax, 2
; Line 564
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN2@UefiDecomp:
; Line 555
	call	ReadUnaligned32
; Line 556
	add	eax, 8
	cmp	r11d, eax
; Line 557
	jb	SHORT $LN5@UefiDecomp
; Line 561
	lea	rcx, QWORD PTR [r10+4]
	mov	DWORD PTR [r9], 13368			; 00003438H
	call	ReadUnaligned32
	mov	DWORD PTR [rbx], eax
; Line 563
	xor	eax, eax
; Line 564
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
UefiDecompressGetInfo ENDP
_TEXT	ENDS
PUBLIC	ReadCLen
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ReadCLen DD imagerel $LN27
	DD	imagerel $LN27+124
	DD	imagerel $unwind$ReadCLen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ReadCLen DD imagerel $LN27+124
	DD	imagerel $LN27+353
	DD	imagerel $chain$1$ReadCLen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ReadCLen DD imagerel $LN27+353
	DD	imagerel $LN27+435
	DD	imagerel $chain$2$ReadCLen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ReadCLen DD 021H
	DD	imagerel $LN27
	DD	imagerel $LN27+124
	DD	imagerel $unwind$ReadCLen
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ReadCLen DD 020521H
	DD	0bd405H
	DD	imagerel $LN27
	DD	imagerel $LN27+124
	DD	imagerel $unwind$ReadCLen
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ReadCLen DD 086c01H
	DD	0a746cH
	DD	0c340dH
	DD	0c009520dH
	DD	050066007H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ReadCLen
_TEXT	SEGMENT
Sd$ = 80
ReadCLen PROC						; COMDAT
; Line 272
$LN27:
	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	rsi
	push	r12
	sub	rsp, 48					; 00000030H
; Line 278
	mov	edx, 9
	mov	rsi, rcx
	call	GetBits
	mov	r12d, eax
; Line 280
	test	ax, ax
	jne	SHORT $LN18@ReadCLen
; Line 284
	mov	edx, 9
	mov	rcx, rsi
	call	GetBits
; Line 286
	lea	rcx, QWORD PTR [rsi+4122]
	mov	r8d, 510				; 000001feH
	xor	edx, edx
	mov	ebx, eax
	call	memset
; Line 287
	lea	rcx, QWORD PTR [rsi+4663]
	movzx	r8d, bx
	mov	edx, 8191				; 00001fffH
; Line 341
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 48					; 00000030H
	pop	r12
	pop	rsi
	pop	rbp
	jmp	SetMem16
$LN18@ReadCLen:
	mov	QWORD PTR [rsp+80], rdi
; Line 292
	xor	edi, edi
; Line 293
	mov	ebp, 510				; 000001feH
	cmp	di, ax
	jae	$LN25@ReadCLen
	mov	QWORD PTR [rsp+88], r13
	mov	r13d, 65535				; 0000ffffH
$LL17@ReadCLen:
	cmp	di, bp
	jae	$LN26@ReadCLen
; Line 294
	mov	edx, DWORD PTR [rsi+26]
	mov	eax, edx
	shr	rax, 24
	movzx	ebx, WORD PTR [rsi+rax*2+12855]
; Line 295
	cmp	bx, 19
	jb	SHORT $LN12@ReadCLen
; Line 296
	mov	ecx, 8388608				; 00800000H
	npad	4
$LL14@ReadCLen:
; Line 301
	movzx	eax, bx
	test	edx, ecx
	je	SHORT $LN11@ReadCLen
	movzx	ebx, WORD PTR [rsi+rax*2+2084]
; Line 302
	jmp	SHORT $LN10@ReadCLen
$LN11@ReadCLen:
; Line 303
	movzx	ebx, WORD PTR [rsi+rax*2+46]
$LN10@ReadCLen:
; Line 306
	shr	ecx, 1
; Line 308
	cmp	bx, 19
	jae	SHORT $LL14@ReadCLen
$LN12@ReadCLen:
; Line 313
	movzx	eax, bx
	mov	rcx, rsi
	movzx	edx, BYTE PTR [rax+rsi+4632]
	call	FillBuf
; Line 315
	cmp	bx, 2
	ja	SHORT $LN9@ReadCLen
; Line 317
	test	bx, bx
	jne	SHORT $LN8@ReadCLen
; Line 318
	mov	ebx, 1
	jmp	SHORT $LN23@ReadCLen
$LN8@ReadCLen:
; Line 319
	cmp	bx, 1
	jne	SHORT $LN6@ReadCLen
; Line 320
	mov	edx, 4
	mov	rcx, rsi
	call	GetBits
	lea	ebx, DWORD PTR [rax+3]
	jmp	SHORT $LN23@ReadCLen
$LN6@ReadCLen:
; Line 321
	cmp	bx, 2
	jne	SHORT $LN23@ReadCLen
; Line 322
	mov	edx, 9
	mov	rcx, rsi
	call	GetBits
	lea	ebx, DWORD PTR [rax+20]
$LN23@ReadCLen:
; Line 325
	add	bx, r13w
	js	SHORT $LN1@ReadCLen
$LL3@ReadCLen:
	cmp	di, bp
	jae	SHORT $LN1@ReadCLen
; Line 326
	movzx	eax, di
	inc	di
	add	bx, r13w
	mov	BYTE PTR [rax+rsi+4122], 0
	jns	SHORT $LL3@ReadCLen
; Line 329
	jmp	SHORT $LN1@ReadCLen
$LN9@ReadCLen:
; Line 331
	movzx	eax, di
	sub	bl, 2
	inc	di
	mov	BYTE PTR [rax+rsi+4122], bl
$LN1@ReadCLen:
; Line 293
	cmp	di, r12w
	jb	$LL17@ReadCLen
$LN26@ReadCLen:
	mov	r13, QWORD PTR [rsp+88]
$LN25@ReadCLen:
; Line 336
	movzx	eax, di
	mov	ecx, ebp
	xor	edx, edx
	sub	ecx, eax
	movzx	eax, di
	movsxd	r8, ecx
	lea	rcx, QWORD PTR [rax+rsi+4122]
	call	memset
; Line 338
	lea	r11, QWORD PTR [rsi+4663]
	lea	r8, QWORD PTR [rsi+4122]
	mov	r9d, 12
	mov	edx, ebp
	mov	rcx, rsi
	mov	QWORD PTR [rsp+32], r11
	call	MakeTable
	mov	rdi, QWORD PTR [rsp+80]
; Line 341
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 48					; 00000030H
	pop	r12
	pop	rsi
	pop	rbp
	ret	0
ReadCLen ENDP
_TEXT	ENDS
PUBLIC	ReadPTLen
;	COMDAT pdata
pdata	SEGMENT
$pdata$ReadPTLen DD imagerel $LN29
	DD	imagerel $LN29+120
	DD	imagerel $unwind$ReadPTLen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ReadPTLen DD imagerel $LN29+120
	DD	imagerel $LN29+302
	DD	imagerel $chain$1$ReadPTLen
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ReadPTLen DD imagerel $LN29+302
	DD	imagerel $LN29+388
	DD	imagerel $chain$2$ReadPTLen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ReadPTLen DD 021H
	DD	imagerel $LN29
	DD	imagerel $LN29+120
	DD	imagerel $unwind$ReadPTLen
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ReadPTLen DD 040a21H
	DD	0be40aH
	DD	0a7405H
	DD	imagerel $LN29
	DD	imagerel $LN29+120
	DD	imagerel $unwind$ReadPTLen
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ReadPTLen DD 081301H
	DD	0d5413H
	DD	0c3413H
	DD	0d00f5213H
	DD	0600bc00dH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ReadPTLen
_TEXT	SEGMENT
Sd$ = 80
nn$ = 88
nbit$ = 96
Special$ = 104
ReadPTLen PROC						; COMDAT
; Line 191
$LN29:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	push	rsi
	push	r12
	push	r13
	sub	rsp, 48					; 00000030H
	movzx	ebp, dx
; Line 200
	movzx	edx, r8w
	movzx	r13d, r9w
	movzx	ebx, r8w
	mov	rsi, rcx
	call	GetBits
	mov	r12d, eax
; Line 202
	test	ax, ax
	jne	SHORT $LN11@ReadPTLen
; Line 206
	movzx	edx, bx
	mov	rcx, rsi
	call	GetBits
; Line 208
	lea	rcx, QWORD PTR [rsi+12855]
	mov	edx, 512				; 00000200H
	mov	r8d, eax
	call	SetMem16
; Line 210
	lea	rcx, QWORD PTR [rsi+4632]
	movzx	r8d, bp
	xor	edx, edx
	call	memset
; Line 212
	xor	ebx, ebx
	movzx	eax, bx
	jmp	$LN12@ReadPTLen
$LN11@ReadPTLen:
; Line 215
	xor	ebx, ebx
; Line 217
	cmp	bx, ax
	jae	$LN24@ReadPTLen
	mov	QWORD PTR [rsp+80], rdi
	mov	QWORD PTR [rsp+88], r14
	mov	r14d, 65535				; 0000ffffH
	npad	8
$LL10@ReadPTLen:
	cmp	bx, 31
	jae	$LN27@ReadPTLen
; Line 219
	mov	ecx, DWORD PTR [rsi+26]
	mov	edi, ecx
	shr	edi, 29
; Line 226
	cmp	di, 7
	jne	SHORT $LN28@ReadPTLen
; Line 227
	mov	eax, 268435456				; 10000000H
; Line 228
	test	ecx, eax
	je	SHORT $LN14@ReadPTLen
$LL7@ReadPTLen:
; Line 229
	shr	eax, 1
; Line 230
	inc	di
	test	ecx, eax
	jne	SHORT $LL7@ReadPTLen
; Line 234
	cmp	di, 7
$LN28@ReadPTLen:
	jae	SHORT $LN14@ReadPTLen
	mov	eax, 3
	jmp	SHORT $LN15@ReadPTLen
$LN14@ReadPTLen:
	movzx	eax, di
	sub	eax, 3
$LN15@ReadPTLen:
	movzx	edx, ax
	mov	rcx, rsi
	call	FillBuf
; Line 236
	movzx	r11d, bx
	inc	bx
	mov	BYTE PTR [r11+rsi+4632], dil
; Line 244
	cmp	bx, r13w
	jne	SHORT $LN23@ReadPTLen
; Line 245
	mov	edx, 2
	mov	rcx, rsi
	call	GetBits
; Line 246
	dec	ax
	js	SHORT $LN23@ReadPTLen
	npad	1
$LL4@ReadPTLen:
	cmp	bx, 31
	jae	SHORT $LN23@ReadPTLen
; Line 247
	movzx	ecx, bx
	inc	bx
	add	ax, r14w
	mov	BYTE PTR [rcx+rsi+4632], 0
	jns	SHORT $LL4@ReadPTLen
$LN23@ReadPTLen:
; Line 217
	cmp	bx, r12w
	jb	$LL10@ReadPTLen
$LN27@ReadPTLen:
	mov	rdi, QWORD PTR [rsp+80]
	mov	r14, QWORD PTR [rsp+88]
$LN24@ReadPTLen:
; Line 252
	cmp	bx, bp
	jae	SHORT $LN25@ReadPTLen
$LL2@ReadPTLen:
	cmp	bx, 31
	jae	SHORT $LN25@ReadPTLen
; Line 253
	movzx	eax, bx
	inc	bx
	mov	BYTE PTR [rax+rsi+4632], 0
	cmp	bx, bp
	jb	SHORT $LL2@ReadPTLen
$LN25@ReadPTLen:
; Line 256
	lea	rax, QWORD PTR [rsi+12855]
	lea	r8, QWORD PTR [rsi+4632]
	mov	r9d, 8
	movzx	edx, bp
	mov	rcx, rsi
	mov	QWORD PTR [rsp+32], rax
	call	MakeTable
$LN12@ReadPTLen:
; Line 257
	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r13
	pop	r12
	pop	rsi
	ret	0
ReadPTLen ENDP
_TEXT	ENDS
PUBLIC	DecodeP
;	COMDAT pdata
pdata	SEGMENT
$pdata$DecodeP DD imagerel $LN12
	DD	imagerel $LN12+167
	DD	imagerel $unwind$DecodeP
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DecodeP DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT DecodeP
_TEXT	SEGMENT
Sd$ = 48
DecodeP	PROC						; COMDAT
; Line 135
$LN12:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
; Line 140
	mov	ecx, DWORD PTR [rcx+26]
	mov	eax, ecx
	shr	rax, 24
	movzx	ebx, WORD PTR [rdi+rax*2+12855]
; Line 142
	cmp	bx, 31
	jb	SHORT $LN4@DecodeP
; Line 143
	mov	edx, 8388608				; 00800000H
	npad	2
$LL6@DecodeP:
; Line 148
	movzx	eax, bx
	test	ecx, edx
	je	SHORT $LN3@DecodeP
	movzx	ebx, WORD PTR [rdi+rax*2+2084]
; Line 149
	jmp	SHORT $LN2@DecodeP
$LN3@DecodeP:
; Line 150
	movzx	ebx, WORD PTR [rdi+rax*2+46]
$LN2@DecodeP:
; Line 153
	shr	edx, 1
; Line 154
	cmp	bx, 31
	jae	SHORT $LL6@DecodeP
$LN4@DecodeP:
; Line 159
	movzx	eax, bx
	mov	rcx, rdi
	movzx	edx, BYTE PTR [rax+rdi+4632]
	call	FillBuf
; Line 161
	movzx	esi, bx
; Line 162
	cmp	bx, 1
	jbe	SHORT $LN11@DecodeP
; Line 163
	lea	edx, DWORD PTR [rbx-1]
	mov	rcx, rdi
	call	GetBits
	lea	ecx, DWORD PTR [rsi-1]
	mov	r11d, eax
	mov	eax, 1
	shl	eax, cl
	add	eax, r11d
; Line 167
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN11@DecodeP:
	mov	rbx, QWORD PTR [rsp+48]
	mov	eax, esi
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
DecodeP	ENDP
_TEXT	ENDS
PUBLIC	DecodeC
;	COMDAT pdata
pdata	SEGMENT
$pdata$DecodeC DD imagerel $LN14
	DD	imagerel $LN14+224
	DD	imagerel $unwind$DecodeC
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$DecodeC DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT DecodeC
_TEXT	SEGMENT
Sd$ = 48
DecodeC	PROC						; COMDAT
; Line 359
$LN14:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 363
	cmp	WORD PTR [rcx+34], 0
	mov	rdi, rcx
	mov	ebx, 65535				; 0000ffffH
	jne	SHORT $LN7@DecodeC
; Line 368
	mov	edx, 16
	call	GetBits
; Line 374
	mov	edx, 19
	mov	rcx, rdi
	lea	r9d, QWORD PTR [rdx-16]
	lea	r8d, QWORD PTR [rdx-14]
	mov	WORD PTR [rdi+34], ax
	call	ReadPTLen
	mov	WORD PTR [rdi+44], ax
; Line 375
	test	ax, ax
	je	SHORT $LN8@DecodeC
$LN13@DecodeC:
; Line 376
	xor	eax, eax
; Line 420
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN8@DecodeC:
; Line 383
	mov	rcx, rdi
	call	ReadCLen
; Line 389
	movzx	r8d, BYTE PTR [rdi+13367]
	mov	r9d, ebx
	mov	edx, 31
	mov	rcx, rdi
	call	ReadPTLen
	mov	WORD PTR [rdi+44], ax
; Line 390
	test	ax, ax
; Line 391
	jne	SHORT $LN13@DecodeC
$LN7@DecodeC:
; Line 398
	add	WORD PTR [rdi+34], bx
; Line 399
	mov	edx, DWORD PTR [rdi+26]
; Line 401
	mov	r8d, 510				; 000001feH
	mov	eax, edx
	shr	rax, 20
	movzx	ebx, WORD PTR [rdi+rax*2+4663]
	cmp	bx, r8w
	jb	SHORT $LN3@DecodeC
; Line 402
	mov	ecx, 524288				; 00080000H
$LL5@DecodeC:
; Line 406
	movzx	eax, bx
	test	edx, ecx
	je	SHORT $LN2@DecodeC
	movzx	ebx, WORD PTR [rdi+rax*2+2084]
; Line 407
	jmp	SHORT $LN1@DecodeC
$LN2@DecodeC:
; Line 408
	movzx	ebx, WORD PTR [rdi+rax*2+46]
$LN1@DecodeC:
; Line 411
	shr	ecx, 1
; Line 412
	cmp	bx, r8w
	jae	SHORT $LL5@DecodeC
$LN3@DecodeC:
; Line 417
	movzx	ecx, bx
	movzx	edx, BYTE PTR [rcx+rdi+4122]
	mov	rcx, rdi
	call	FillBuf
; Line 419
	movzx	eax, bx
; Line 420
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
DecodeC	ENDP
_TEXT	ENDS
PUBLIC	Decode
;	COMDAT pdata
pdata	SEGMENT
$pdata$Decode DD imagerel $LN24
	DD	imagerel $LN24+32
	DD	imagerel $unwind$Decode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$Decode DD imagerel $LN24+32
	DD	imagerel $LN24+195
	DD	imagerel $chain$2$Decode
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$Decode DD imagerel $LN24+195
	DD	imagerel $LN24+206
	DD	imagerel $chain$3$Decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$Decode DD 021H
	DD	imagerel $LN24
	DD	imagerel $LN24+32
	DD	imagerel $unwind$Decode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$Decode DD 061421H
	DD	08c414H
	DD	07640aH
	DD	065405H
	DD	imagerel $LN24
	DD	imagerel $LN24+32
	DD	imagerel $unwind$Decode
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Decode DD 040a01H
	DD	09340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT Decode
_TEXT	SEGMENT
Sd$ = 48
Decode	PROC						; COMDAT
; Line 432
$LN24:
	mov	QWORD PTR [rsp+32], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 445
	call	DecodeC
; Line 446
	cmp	WORD PTR [rbx+44], 0
	movzx	edi, ax
	jne	$Done$4889
	mov	QWORD PTR [rsp+48], rbp
	mov	QWORD PTR [rsp+56], rsi
	mov	ebp, 256				; 00000100H
	mov	QWORD PTR [rsp+64], r12
	mov	esi, 65535				; 0000ffffH
	lea	r12d, QWORD PTR [rbp-2]
	npad	3
$LL10@Decode:
; Line 450
	cmp	di, bp
	jae	SHORT $LN7@Decode
; Line 454
	mov	eax, DWORD PTR [rbx+16]
	cmp	eax, DWORD PTR [rbx+40]
	jae	SHORT $LN23@Decode
; Line 460
	mov	ecx, eax
	mov	rax, QWORD PTR [rbx+8]
	mov	BYTE PTR [rcx+rax], dil
	inc	DWORD PTR [rbx+16]
; Line 463
	jmp	SHORT $LN2@Decode
$LN7@Decode:
; Line 477
	mov	rcx, rbx
	call	DecodeP
	mov	r8d, DWORD PTR [rbx+16]
	sub	r8d, eax
	dec	r8d
; Line 482
	sub	di, r12w
; Line 483
	js	SHORT $LN2@Decode
	npad	12
$LL3@Decode:
; Line 484
	mov	rdx, QWORD PTR [rbx+8]
	mov	ecx, DWORD PTR [rbx+16]
	movzx	eax, BYTE PTR [r8+rdx]
	inc	r8d
	mov	BYTE PTR [rcx+rdx], al
	inc	DWORD PTR [rbx+16]
	mov	eax, DWORD PTR [rbx+16]
; Line 485
	cmp	eax, DWORD PTR [rbx+40]
	jae	SHORT $LN23@Decode
; Line 489
	add	di, si
; Line 483
	jns	SHORT $LL3@Decode
$LN2@Decode:
; Line 445
	mov	rcx, rbx
	call	DecodeC
; Line 446
	cmp	WORD PTR [rbx+44], 0
	movzx	edi, ax
	je	SHORT $LL10@Decode
$LN23@Decode:
	mov	rsi, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+48]
	mov	r12, QWORD PTR [rsp+64]
$Done$4889:
; Line 496
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
Decode	ENDP
_TEXT	ENDS
PUBLIC	UefiDecompress
;	COMDAT pdata
pdata	SEGMENT
$pdata$UefiDecompress DD imagerel $LN5
	DD	imagerel $LN5+204
	DD	imagerel $unwind$UefiDecompress
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$UefiDecompress DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0c016321aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT UefiDecompress
_TEXT	SEGMENT
Source$ = 48
Destination$ = 56
Scratch$ = 64
UefiDecompress PROC					; COMDAT
; Line 601
$LN5:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	sub	rsp, 32					; 00000020H
; Line 617
	movzx	esi, BYTE PTR [rcx+3]
	movzx	eax, BYTE PTR [rcx+2]
; Line 618
	movzx	ebp, BYTE PTR [rcx+7]
	shl	eax, 16
	shl	esi, 24
	shl	ebp, 24
	add	esi, eax
	movzx	eax, BYTE PTR [rcx+1]
	mov	rbx, r8
	shl	eax, 8
	mov	r12, rdx
	mov	rdi, rcx
	add	esi, eax
	movzx	eax, BYTE PTR [rcx]
	add	esi, eax
	movzx	eax, BYTE PTR [rcx+6]
	shl	eax, 16
	add	ebp, eax
	movzx	eax, BYTE PTR [rcx+5]
	shl	eax, 8
	add	ebp, eax
	movzx	eax, BYTE PTR [rcx+4]
	add	ebp, eax
; Line 623
	jne	SHORT $LN2@UefiDecomp@2
; Line 624
	xor	eax, eax
	jmp	SHORT $LN1@UefiDecomp@2
$LN2@UefiDecomp@2:
; Line 628
	xor	edx, edx
	mov	r8d, 13368				; 00003438H
	mov	rcx, rbx
	call	memset
	lea	rax, QWORD PTR [rdi+8]
; Line 646
	mov	edx, 32					; 00000020H
	mov	rcx, rbx
	mov	BYTE PTR [rbx+13367], 4
	mov	QWORD PTR [rbx+8], r12
	mov	QWORD PTR [rbx], rax
	mov	DWORD PTR [rbx+36], esi
	mov	DWORD PTR [rbx+40], ebp
	call	FillBuf
; Line 651
	mov	rcx, rbx
	call	Decode
; Line 653
	movzx	r11d, WORD PTR [rbx+44]
	neg	r11w
	sbb	eax, eax
	and	eax, 2
$LN1@UefiDecomp@2:
; Line 661
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r12
	ret	0
UefiDecompress ENDP
_TEXT	ENDS
PUBLIC	main
EXTRN	memcpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN20
	DD	imagerel $LN20+269
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$main DD imagerel $LN20+269
	DD	imagerel $LN20+769
	DD	imagerel $chain$4$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$main DD imagerel $LN20+769
	DD	imagerel $LN20+791
	DD	imagerel $chain$5$main
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$main DD 021H
	DD	imagerel $LN20
	DD	imagerel $LN20+269
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$main DD 040a21H
	DD	08d40aH
	DD	0b5405H
	DD	imagerel $LN20
	DD	imagerel $LN20+269
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	085501H
	DD	097455H
	DD	0a6450H
	DD	0f343fH
	DD	0c002b206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT main
_TEXT	SEGMENT
fIn$ = 48
fOut$ = 56
fROMStart$ = 112
argc$ = 112
argv$ = 120
ScratchSize$ = 128
fOutSize$ = 136
main	PROC						; COMDAT
; Line 822
$LN20:
	push	r12
	sub	rsp, 96					; 00000060H
; Line 828
	xor	eax, eax
	mov	r12, rdx
	mov	DWORD PTR fROMStart$[rsp], eax
; Line 829
	mov	DWORD PTR fOutSize$[rsp], eax
; Line 830
	mov	DWORD PTR ScratchSize$[rsp], eax
; Line 834
	cmp	ecx, 3
	je	SHORT $LN12@main
; Line 836
	mov	rcx, QWORD PTR [rdx]
	call	Usage
; Line 838
	mov	eax, 1
; Line 974
	add	rsp, 96					; 00000060H
	pop	r12
	ret	0
$LN12@main:
; Line 842
	mov	rdx, QWORD PTR [rdx+8]
	mov	QWORD PTR [rsp+120], rbx
	lea	r8, OFFSET FLAT:$SG-24
	lea	rcx, QWORD PTR fIn$[rsp]
	mov	QWORD PTR [rsp+80], rsi
	mov	QWORD PTR [rsp+72], rdi
	call	fopen_s
; Line 847
	mov	rcx, QWORD PTR fIn$[rsp]
	xor	edx, edx
	lea	r8d, QWORD PTR [rdx+2]
	call	fseek
; Line 848
	mov	rcx, QWORD PTR fIn$[rsp]
	call	ftell
; Line 849
	mov	rcx, QWORD PTR fIn$[rsp]
	xor	r8d, r8d
	xor	edx, edx
	movsxd	rdi, eax
	call	fseek
; Line 851
	mov	rcx, rdi
	call	malloc
	mov	rbx, rax
; Line 853
	test	rax, rax
	jne	SHORT $LN11@main
; Line 855
	lea	rcx, OFFSET FLAT:$SG-25
	call	printf
; Line 857
	or	eax, -1
	jmp	$LN17@main
$LN11@main:
; Line 861
	mov	rax, QWORD PTR fIn$[rsp]
	mov	r9d, 1
	mov	r8, rdi
	mov	rdx, rdi
	mov	rcx, rbx
	mov	QWORD PTR [rsp+32], rax
	call	fread_s
; Line 866
	mov	rcx, QWORD PTR fIn$[rsp]
	call	fclose
; Line 868
	mov	rcx, QWORD PTR [r12+8]
	lea	r8, QWORD PTR fROMStart$[rsp]
	xor	edx, edx
	call	GetEfiCompressedROM
	test	al, al
	jne	SHORT $LN9@main
; Line 870
	mov	rcx, QWORD PTR [r12+8]
	lea	r8, QWORD PTR fROMStart$[rsp]
	mov	dl, 1
	call	GetEfiCompressedROM
	test	al, al
	jne	SHORT $LN9@main
; Line 872
	lea	rcx, OFFSET FLAT:$SG-26
	call	printf
$LN9@main:
; Line 876
	movsxd	rsi, DWORD PTR fROMStart$[rsp]
	mov	QWORD PTR [rsp+88], rbp
	mov	QWORD PTR [rsp+64], r13
	test	esi, esi
	jle	SHORT $LN8@main
; Line 878
	sub	edi, esi
	movsxd	r13, edi
	mov	rcx, r13
	call	malloc
	mov	rbp, rax
; Line 880
	test	rax, rax
	jne	SHORT $LN7@main
; Line 882
	lea	rcx, OFFSET FLAT:$SG-27
	call	printf
; Line 884
	mov	rcx, rbx
	call	free
; Line 886
	lea	eax, QWORD PTR [rbp-2]
	jmp	$LN19@main
$LN7@main:
; Line 889
	lea	rdx, QWORD PTR [rbx+rsi]
	mov	r8, r13
	mov	rcx, rax
	call	memcpy
; Line 891
	mov	rcx, rbx
	call	free
; Line 893
	mov	rbx, rbp
$LN8@main:
; Line 897
	lea	r9, QWORD PTR ScratchSize$[rsp]
	lea	r8, QWORD PTR fOutSize$[rsp]
	mov	edx, edi
	mov	rcx, rbx
	call	UefiDecompressGetInfo
	test	eax, eax
	je	SHORT $LN6@main
; Line 899
	lea	rcx, OFFSET FLAT:$SG-28
	call	printf
; Line 901
	mov	rcx, rbx
	call	free
; Line 903
	mov	eax, -3
	jmp	$LN19@main
$LN6@main:
; Line 906
	movsxd	rsi, DWORD PTR ScratchSize$[rsp]
	movsxd	rbp, DWORD PTR fOutSize$[rsp]
	lea	rcx, OFFSET FLAT:$SG-29
	mov	r9d, esi
	mov	r8d, ebp
	mov	edx, edi
	call	printf
; Line 908
	test	ebp, ebp
	jg	SHORT $LN5@main
; Line 910
	lea	rcx, OFFSET FLAT:$SG-30
	call	printf
; Line 912
	mov	rcx, rbx
	call	free
; Line 914
	mov	eax, -4
	jmp	$LN19@main
$LN5@main:
; Line 917
	test	esi, esi
	jg	SHORT $LN4@main
; Line 919
	lea	rcx, OFFSET FLAT:$SG-31
	call	printf
; Line 921
	mov	rcx, rbx
	call	free
; Line 923
	mov	eax, -5
	jmp	$LN19@main
$LN4@main:
; Line 926
	mov	rcx, rsi
	call	malloc
	mov	rdi, rax
; Line 928
	test	rax, rax
	jne	SHORT $LN3@main
; Line 930
	lea	rcx, OFFSET FLAT:$SG-32
	call	printf
; Line 932
	mov	rcx, rbx
	call	free
; Line 934
	lea	eax, QWORD PTR [rdi-6]
	jmp	$LN19@main
$LN3@main:
; Line 937
	mov	rcx, rbp
	call	malloc
	mov	rsi, rax
; Line 939
	test	rax, rax
	jne	SHORT $LN2@main
; Line 941
	lea	rcx, OFFSET FLAT:$SG-33
	call	printf
; Line 943
	mov	rcx, rbx
	call	free
; Line 944
	mov	rcx, rdi
	call	free
; Line 946
	lea	eax, QWORD PTR [rsi-7]
	jmp	$LN19@main
$LN2@main:
; Line 949
	mov	r8, rdi
	mov	rdx, rax
	mov	rcx, rbx
	call	UefiDecompress
	test	eax, eax
	je	SHORT $LN1@main
; Line 951
	lea	rcx, OFFSET FLAT:$SG-34
	call	printf
; Line 953
	mov	rcx, rbx
	call	free
; Line 954
	mov	rcx, rsi
	call	free
; Line 955
	mov	rcx, rdi
	call	free
; Line 957
	mov	eax, -8
	jmp	SHORT $LN19@main
$LN1@main:
; Line 961
	mov	rdx, QWORD PTR [r12+16]
	lea	r8, OFFSET FLAT:$SG-35
	lea	rcx, QWORD PTR fOut$[rsp]
	call	fopen_s
; Line 966
	mov	r9, QWORD PTR fOut$[rsp]
	mov	r8d, 1
	mov	rdx, rbp
	mov	rcx, rsi
	call	fwrite
; Line 967
	mov	rcx, QWORD PTR fOut$[rsp]
	call	fclose
; Line 969
	mov	rcx, rbx
	call	free
; Line 970
	mov	rcx, rsi
	call	free
; Line 971
	mov	rcx, rdi
	call	free
; Line 973
	xor	eax, eax
$LN19@main:
	mov	rbp, QWORD PTR [rsp+88]
	mov	r13, QWORD PTR [rsp+64]
$LN17@main:
	mov	rsi, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+120]
	mov	rdi, QWORD PTR [rsp+72]
; Line 974
	add	rsp, 96					; 00000060H
	pop	r12
	ret	0
main	ENDP
_TEXT	ENDS
END
